name: Rust CI/CD backend

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
    test:
        name: Interaction with DB
        runs-on: ubuntu-latest
        # Service containers to run alongside the `test` container job
        services:
          postgres:
            # Docker Hub image
            image: postgres:14
            env:
              POSTGRES_USER: ${{secrets.POSTGRES_USER}}
              POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
              POSTGRES_DB: ${{secrets.POSTGRES_DB}}
            ports:
              - ${{vars.POSTGRES_PORT}}:5432
        
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          APP_USER: ${{ secrets.APP_USER }}
          APP_USER_PW: ${{ secrets.APP_USER_PW }}

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Cache Cargo registry
              uses: actions/cache@v3
              with:
                path: ~/.cargo/registry
                key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
                restore-keys: |
                  ${{ runner.os }}-cargo-registry-
      
            - name: Cache Cargo index
              uses: actions/cache@v3
              with:
                path: ~/.cargo/git
                key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
                restore-keys: |
                  ${{ runner.os }}-cargo-index-
    
            - name: Install the Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1

            - name: Install cargo-chef
              run: cargo install cargo-chef

            - name: Prepare build plan
              run: cargo chef prepare --recipe-path recipe.json
      
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                path: target
                key: ${{ runner.os }}-cargo-chef-${{ hashFiles('recipe.json') }}
                restore-keys: |
                  ${{ runner.os }}-cargo-chef-
      
            - name: Build dependencies
              run: cargo chef cook --recipe-path recipe.json --release
      
            - name: Cache Cargo Bin
              uses: actions/cache@v3
              with:
                path: ~/.cargo/bin
                key: ${{ runner.os }}-cargo-bin-${{ vars.SQLX_CLI_VERSION }}
                restore-keys: |
                  ${{ runner.os }}-cargo-bin-

            - name: Add Cargo bin to PATH
              run: |
                echo "Adding Cargo bin to PATH"
                echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
      
            - name: Verify PATH
              run: |
                echo "Current PATH:"
                echo $PATH
                echo "Contents of GITHUB_PATH:"
                cat $GITHUB_PATH
                ls -la $HOME/.cargo/bin

            - name: Install sqlx-cli
              run: |
                if ! command -v sqlx &> /dev/null; then
                  echo "sqlx not found, installing..."
                  cargo install sqlx-cli \
                  --version=${{ vars.SQLX_CLI_VERSION }} \
                  --features ${{ vars.SQLX_CLI_FEATURES }} \
                  --no-default-features \
                  --locked
                else
                  echo "sqlx-cli already installed, skipping installation."
                fi
                
                echo "Verifying sqlx installation"
                sqlx --version
  
            - name: Create app user in Postgres
              run: |
                sudo apt-get install postgresql-client

                # Wait for PostgreSQL to be ready
                for i in {1..10}; do
                  pg_isready -h localhost -p 5432 && break
                  echo "Waiting for PostgreSQL to be ready..."
                  sleep 2
                done
        
                # Create the application user
                CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PW}';"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${CREATE_QUERY}"
        
                # Grant create db privileges to the app user
                GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${GRANT_QUERY}"
            
            - name: Migrate database
              run: |
                SKIP_DOCKER=true ./scripts/init_db.sh

            - name: List tests
              run: cargo test --list

            - name: Debug test discovery
              run: |
                echo "Project structure:"
                find . -type f -name "*.rs" | sort
                
                echo "\nTest files content check:"
                for test_file in $(find ./tests -name "*.rs"); do
                  echo "\n===== $test_file ====="
                  grep -n "#\[.*test" $test_file || echo "No test attributes found"
                  grep -n "async fn test_" $test_file || echo "No async test functions found"
                  grep -n "fn test_" $test_file || echo "No test functions found"
                done
                
                echo "\nCargo.toml content:"
                cat Cargo.toml
            
                echo "\nTrying verbose test run:"
                RUST_BACKTRACE=1 cargo test --verbose
            
                echo "\nChecking tokio version and features:"
                cargo tree -i tokio

            - name: Run tests
              env:
                RUSTFLAGS: "-A warnings"
              run: cargo test --all --features=tokio/macros,tokio/rt-multi-thread,tokio/test-util -- --nocapture --test-threads=1

            - name: Check test file locations
              run: |
                ls -la tests/
                find . -name "*.rs" | grep test

            - name: Check that queries are fresh
              env:
                RUSTFLAGS: "-A warnings"
              run: cargo sqlx prepare --workspace --check -- --all-targets