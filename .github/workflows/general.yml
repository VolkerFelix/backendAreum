name: Rust CI/CD backend

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
    test:
        name: Interaction with DB
        runs-on: ubuntu-latest
        # Service containers to run alongside the `test` container job
        services:
          postgres:
            # Docker Hub image
            image: postgres:14
            env:
              POSTGRES_USER: ${{secrets.POSTGRES_USER}}
              POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
              POSTGRES_DB: ${{secrets.POSTGRES_DB}}
            ports:
              - ${{vars.POSTGRES_PORT}}:5432
        
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          APP_USER: ${{ secrets.APP_USER }}
          APP_USER_PW: ${{ secrets.APP_USER_PW }}

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4
    
            - name: Install the Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1
        
            - name: Install sqlx-cli
              run:
                cargo install sqlx-cli
                --version=${{ vars.SQLX_CLI_VERSION }}
                --features ${{ vars.SQLX_CLI_FEATURES }}
                --no-default-features
                --locked
                # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available.
                # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published.
                # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems
        
            - name: Create app user in Postgres
              run: |
                sudo apt-get install postgresql-client

                # Wait for PostgreSQL to be ready
                for i in {1..10}; do
                  pg_isready -h localhost -p 5432 && break
                  echo "Waiting for PostgreSQL to be ready..."
                  sleep 2
                done
        
                # Create the application user
                CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PW}';"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${CREATE_QUERY}"
        
                # Grant create db privileges to the app user
                GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${GRANT_QUERY}"
            
            - name: Migrate database
              run: |
                SKIP_DOCKER=true ./scripts/init_db.sh

            - name: Run tests
              run: cargo test

            - name: Check that queries are fresh
              run: cargo sqlx prepare --workspace --check -- --all-targets