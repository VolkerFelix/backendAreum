name: Rust CI/CD backend

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
    test:
        name: Interaction with DB
        runs-on: ubuntu-latest
        # Service containers to run alongside the `test` container job
        services:
          postgres:
            # Docker Hub image
            image: postgres:14
            env:
              POSTGRES_USER: ${{secrets.POSTGRES_USER}}
              POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
              POSTGRES_DB: ${{secrets.POSTGRES_DB_NAME}}
            ports:
              - ${{vars.POSTGRES_PORT}}:5432
        
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          APP_USER: ${{ secrets.APP_USER }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
          APP_PORT: ${{ secrets.APP_PORT }}

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            # Add the check for SQLx prepare files
            - name: Check SQLx prepare files
              run: |
                echo "Checking .sqlx directory:"
                ls -la .sqlx/ || echo ".sqlx directory not found"
                echo "Number of prepare files: $(find .sqlx -type f 2>/dev/null | wc -l || echo '0')"
    
            - name: Install the Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1

            - name: Install sqlx-cli
              run: |
                if ! command -v sqlx &> /dev/null; then
                  echo "sqlx not found, installing..."
                  cargo install sqlx-cli \
                  --version=${{ vars.SQLX_CLI_VERSION }} \
                  --features ${{ vars.SQLX_CLI_FEATURES }} \
                  --no-default-features \
                  --locked
                else
                  echo "sqlx-cli already installed, skipping installation."
                fi
                
                echo "Verifying sqlx installation"
                sqlx --version
  
            - name: Create app user in Postgres
              run: |
                sudo apt-get install postgresql-client

                # Wait for PostgreSQL to be ready
                for i in {1..10}; do
                  pg_isready -h localhost -p 5432 && break
                  echo "Waiting for PostgreSQL to be ready..."
                  sleep 2
                done
        
                # Create the application user
                CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PW}';"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${CREATE_QUERY}"
        
                # Grant create db privileges to the app user
                GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
                PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "${POSTGRES_USER}" -h "localhost" -c "${GRANT_QUERY}"
            
            - name: Migrate database
              run: |
                SKIP_DOCKER=true ./scripts/init_db.sh

            # Add this step to generate SQLx prepare files if they don't exist
            - name: Generate SQLx prepare files
              run: |
                # Only generate if the .sqlx directory doesn't exist or is empty
                if [ ! -d ".sqlx" ] || [ -z "$(ls -A .sqlx 2>/dev/null)" ]; then
                  echo "Generating SQLx prepare files..."
                  # Set DATABASE_URL for prepare
                  export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:${POSTGRES_PORT}/${POSTGRES_DB_NAME}"
                  echo "Using DATABASE_URL: postgres://${POSTGRES_USER}:[REDACTED]@localhost:${POSTGRES_PORT}/${POSTGRES_DB_NAME}"
                  
                  # Generate prepare files
                  cargo sqlx prepare --workspace -- --all-targets
                  
                  # Verify files were created
                  echo "Generated SQLx prepare files:"
                  ls -la .sqlx/ || echo "Failed to generate .sqlx directory"
                else
                  echo "SQLx prepare files already exist, skipping generation"
                fi
              
            - name: Run tests with explicit DATABASE_URL
              env:
                RUSTFLAGS: "-A warnings"
                SQLX_OFFLINE: true
                DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB_NAME }}
              run: cargo test --all

            - name: Check that queries are fresh
              env:
                RUSTFLAGS: "-A warnings"
              run: cargo sqlx prepare --workspace --check -- --all-targets